import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class week10_4 {
	static int start;
	static int end;
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);		
		int m=in.nextInt();
		int n=in.nextInt();
		
		Graph graph=new Graph(m*n+1);
		char[][] arr = new char[m][n];
		int[][] arrTemp = new int[m][n];
		int p=1;
		in.nextLine();
		for(int i=0;i<m;i++) {
			arr[i]=in.nextLine().toCharArray();
			for(int j=0;j<n;j++) {
				arrTemp[i][j]=p;
				p++;
			}
		}
		
		for(int i=0;i<m;i++) {
			for(int j=0;j<n;j++) {
				if(arr[i][j]=='.'||arr[i][j]=='S'||arr[i][j]=='E') {
					if(i==0) {
						if(arr[m-1][j]=='.'||arr[m-1][j]=='S'||arr[m-1][j]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[m-1][j]);
						}
					}else {
						if(arr[i-1][j]=='.'||arr[i-1][j]=='S'||arr[i-1][j]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i-1][j]);
						}
					}
					
					if(i==m-1) {
						if(arr[0][j]=='.'||arr[0][j]=='S'||arr[0][j]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[0][j]);
						}
					}else {
						if(arr[i+1][j]=='.'||arr[i+1][j]=='S'||arr[i+1][j]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i+1][j]);
						}
					}
					
					if(j==0) {
						if(arr[i][n-1]=='.'||arr[i][n-1]=='S'||arr[i][n-1]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i][n-1]);
						}
					}else {
						if(arr[i][j-1]=='.'||arr[i][j-1]=='S'||arr[i][j-1]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i][j-1]);
						}
					}
					
					if(j==n-1) {
						if(arr[i][0]=='.'||arr[i][0]=='S'||arr[i][0]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i][0]);
						}
					}else {
						if(arr[i][j+1]=='.'||arr[i][j+1]=='S'||arr[i][j+1]=='E') {
							graph.addEdge(arrTemp[i][j],arrTemp[i][j+1]);
						}
					}
							
				}
			}
		}
		
		

		for(int i=0;i<m;i++) {
			for(int j=0;j<n;j++) {
				if(arr[i][j]=='S') {
					start=arrTemp[i][j];
				}
				if(arr[i][j]=='E') {
					end=arrTemp[i][j];
				}
			}
			
		}
		BreadthFirstPaths bfs=new BreadthFirstPaths(graph,start);
		Stack<Integer> s=bfs.pathTo(end);
		while(!s.isEmpty()) {
		
			int temp=s.pop();
			for(int i=0;i<m;i++) {
				for(int j=0;j<n;j++) {
					if(temp==arrTemp[i][j]&&temp!=end&&temp!=start) {
						arr[i][j]='x';
					}
				}				
			}
		}
		for(int i=0;i<m;i++) {
			for(int j=0;j<n;j++) {
				System.out.print(arr[i][j]);
			}
			System.out.println();
		}
		

		

	}

}
